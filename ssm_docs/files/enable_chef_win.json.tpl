{
	"schemaVersion": "2.2",
	"description": "Install/Update Chef",
	"mainSteps": [
		{
			"action": "aws:runPowerShellScript",
			"name": "InstallChefClient",
			"precondition": {
				"StringEquals": [
					"platformType",
					"Windows"
				]
			},
			"inputs": {
				"runCommand": [
					"# Get tags",
					"Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LocalAccountTokenFilterPolicy -Value 1 -Type DWord",
					"$instanceid     = Invoke-RestMethod http://169.254.169.254/latest/meta-data/instance-id # this uses the EC2 instance ID as the node name",
					"$tags           = Get-EC2Instance -Instance $instanceId | Select -ExpandProperty Instances | Select -ExpandProperty Tags",
					"$app_role       = $tags | ? Key -eq AppRole | Select -ExpandProperty Value",
					"$app_id         = $tags | ? Key -eq AppID | Select -ExpandProperty Value",
					"$wkspc          = $tags | ? Key -eq Workspace | Select -ExpandProperty Value",
					"$workload       = $tags | ? Key -eq Workload | Select -ExpandProperty Value",
					"$join_domain    = $tags | ? Key -eq JoinDomain | Select -ExpandProperty Value",
					"$chef_local_dir = \"c:/chef\"",
					"$chef_role      = \"$workload-$app_role-$app_id\".ToLower()",
					"$chef_env       = $tags | ? Key -eq ChefEnv | Select -ExpandProperty Value",
					"$server_count   = (($tags | ? Key -eq Name | Select -ExpandProperty Value) -split '-')[3]",
					"$svrName        = $tags | ? Key -eq MachineName | Select -ExpandProperty Value",
					"$suffix         = $instanceid.substring($instanceid.length -2,2)",
					"$node_name      = $svrName+$suffix",
					"$name           = $tags | ? Key -eq Name | Select -ExpandProperty Value",
					"$base_role      = \"${chef_base_role}\"",
					"$chef_client    = ((Get-SSMParameterValue -Name ${chef_client_version} -WithDecryption $true).parameters).value",
					"$chef_org_name  = ((Get-SSMParameterValue -Name ${chef_org} -WithDecryption $true).parameters).value",
					"$data_token     = ((Get-SSMParameterValue -Name ${data_token} -WithDecryption $true).parameters).value",
					"$chef_auto_fqdn = ((Get-SSMParameterValue -Name ${chef_automate_fqdn} -WithDecryption $true).parameters).value",
					"$chef_svr_fqdn  = ((Get-SSMParameterValue -Name ${chef_server_fqdn} -WithDecryption $true).parameters).value",
					"$chef_encrypted_data_bag_secret = ((Get-SSMParameterValue -Name ${chef_encrypted_data_bag_secret} -WithDecryption $true).parameters).Value",
					"$chef_validator_pem = ((Get-SSMParameterValue -Name ${chef_validator_pem} -WithDecryption $true).parameters).Value",
					"if($join_domain -eq \"true\"){",
					"   $secPassword = ConvertTo-SecureString \"${password}\" -AsPlainText -Force",
          "   $DomainUserCreds = New-Object System.Management.Automation.PSCredential \"${username}@${domain}\", $secPassword",
					"}",
					"if(-not (Test-Path -Path $chef_local_dir)){",
					"    mkdir $chef_local_dir",
					"    mkdir \"$chef_local_dir\\trusted_certs\"",
					"}",
					"# Create client.rb",
					"$clientFile = Join-Path $chef_local_dir \"client.rb\"",
					"$clientText = \"",
					"        log_level                 :info",
					"        file_cache_path           '$chef_local_dir/cache'",
					"        file_backup_path          '$chef_local_dir/backup'",
					"        cache_options             ({:path => '$chef_local_dir/cache/checksums', :skip_expires => true})",
					"        node_name                 '$node_name'",
					"        trusted_certs_dir         '$chef_local_dir/trusted_certs'",
					"        chef_server_url           'https://$chef_svr_fqdn/organizations/$chef_org_name'",
					"        validation_client_name    '$chef_org_name-validator'",
					"        client_key                '$chef_local_dir/client.pem'",
					"        validation_key            '$chef_local_dir/$chef_org_name-validator.pem'",
					"        ssl_verify_mode           :verify_none",
					"        verify_api_cert           false",
					"        environment               '$chef_env'",
					"        encrypted_data_bag_secret '$chef_local_dir/encrypted_data_bag_secret'",
					"    \"",
					"Set-Content -Value $clientText -Path $clientFile",
					"# Create first-run.json",
					"$firstRunFile = Join-Path $chef_local_dir \"first-run.json\"",
					"$firstRunText =  @{run_list=\"role[$chef_role]\"} | ConvertTo-Json -Compress",
					"Set-Content -Value $firstRunText $firstRunFile",
					"# Create exact-valdator.pem",
					"$validatorPemFile = Join-Path $chef_local_dir \"$chef_org_name-validator.pem\"",
					"#$validatorPemContent = $chef_validator_pem -replace \"\\n\",\"`n\"",
					"#Set-Content -Value $validatorPemContent $validatorPemFile -Encoding Ascii",
					"Set-Content -Value $chef_validator_pem $validatorPemFile -Encoding Ascii",
					"$dataBagSecretFile = Join-Path $chef_local_dir \"encrypted_data_bag_secret\"",
					"$dataBagSecretFileContent = $chef_encrypted_data_bag_secret -replace \"\\n\",\"`n\"",
					"Set-Content -Value $dataBagSecretFileContent $dataBagSecretFile -Encoding Ascii",
					"# Create config.rb",
					"$configFile = Join-Path $chef_local_dir 'config.rb'",
					"$configContent =",
					"    \"",
					"    node_name               '$node_name'",
					"    chef_server_url         'https://$chef_svr_fqdn/organizations/$chef_org_name'",
					"    client_key              '$chef_local_dir/client.pem'",
					"   \"",
					"Set-Content -value $configContent $configFile -Encoding Ascii",
					"# Download and install the latest stable version of chef client (Change -channel to \"current\" if the newest version is needed)",
					"if( -not (Test-Path -Path C:\\opscode\\chef\\bin\\chef-client.bat) ) {",
					"   Invoke-Expression ((New-Object net.webclient).downloadstring('https://omnitruck.chef.io/install.ps1'))",
					"   Install-Project -project chef -channel stable -daemon task -version $chef_client",					"}",
					"# Get the chef server SSL cert",
					"cd c:\\chef",
					"# & C:\\opscode\\chef\\bin\\knife.bat ssl fetch",
					"# Run chef client for the first time",
					"& C:\\opscode\\chef\\bin\\chef-client.bat -r recipe[base_common]",
					"# Set the chef run list",
					"& C:\\opscode\\chef\\bin\\knife.bat node run_list set $node_name `'role[$chef_role]`' -c $configFile",
					"sleep 10",
					"",
					"# Join to Domain",
					"if ( -not (gwmi win32_computersystem).partofdomain -and $join_domain -eq \"true\" ) {",
					"   Add-Computer -DomainName \"${domain}\" -OUPath \"${computers_ou}\" -Credential $DomainUserCreds",
					"   # Need to add a delay to reboot to allow SSM to complete its run and not fail.",
					"   shutdown -r -f -t 30",
					"} else {",
					"& C:\\opscode\\chef\\bin\\chef-client.bat -j ",
					"}"
				]
			}
		}
	]
}

